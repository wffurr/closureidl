from .config import version as _version
from .util import join as _join
import textwrap as _textwrap
import re as _re
from itertools import chain as _chain

# http://www.w3.org/TR/WebIDL/#es-type-mapping
types_conversion = {
  "any": "*",
  "byte": "number",
  "octet": "number",
  "short": "number",
  "unsigned short": "number",
  "long": "number",
  "unsigned long": "number",
  "long long": "number",
  "unsigned long long": "number",
  "float": "number",
  "unrestricted float": "number",
  "double": "number",
  "unrestricted double": "number",
  "DOMString": "string"
}

_re_namespaced_type = _re.compile("(\w+)::(\w+)")

def get_type_name(idl_node):
    t_id = idl_node.type.id
    m = _re_namespaced_type.match(t_id)
    if m:
        _, t_id = m.groups()
    return types_conversion.get(t_id, t_id)


@_join("\n")
def format_comment_block(lines, width=80):
    try:
        it = iter(lines)
        lines = _chain([next(it)], it)
    except StopIteration:
        yield "/** */"
    else:
        yield "/**"
        for line in lines:
            for w_line in _textwrap.wrap(line, width=width-3):
                yield " * "+w_line
        yield " */"

def format_fileoverview(url):
    lines = ("@fileoverview Generated by closureidl %s." % _version,
             "@see %s" % url,
             "",
             "@externs") 
    return format_comment_block(lines)

@_join("\n")
def format_attribute(interface_name, idl_attribute):
    lines = ["@type {%s}" % get_type_name(idl_attribute)]
    yield format_comment_block(lines)
    yield "%s.prototype.%s;" % (interface_name, idl_attribute.id)

@_join("\n")
def format_constant(interface_name, idl_constant):
    lines = ["@const", "@type {%s}" % get_type_name(idl_constant)]
    yield format_comment_block(lines)
    yield "%s.%s;" % (interface_name, idl_constant.id)

def format_function_def(arg_names):
    return "function(%s) {}" % ", ".join(arg_names)

def format_params(idl_arguments):
    for idl_arg in idl_arguments:
        yield "@param {%s} %s" % (get_type_name(idl_arg), idl_arg.id)

@_join("\n")
def format_method(interface_name, idl_operation):
    lines = format_params(idl_operation.arguments)
    if idl_operation.type.id != "void":
        lines = _chain(lines, ["@return {%s}" % get_type_name(idl_operation)])
    
    yield format_comment_block(lines)
    
    method_name = idl_operation.id
    arg_names = (a.id for a in idl_operation.arguments)
    yield "%s.prototype.%s = %s;" % (interface_name, method_name, 
                                     format_function_def(arg_names))

@_join("\n")
def format_interface(idl_interface):
    lines = ["@constructor"]
    parents = idl_interface.parents
    if len(parents) > 0:
        lines.append("@extends {%s}\n" % get_type_name(parents[0]))
        for parent in parents[1:]:
            lines.append("@implements {%s}\n" % get_type_name(parent))
    yield format_comment_block(lines)
    yield "function %s() {}" % idl_interface.javascript_binding_name
    
    for const in idl_interface.constants:
        yield ""
        yield format_constant(idl_interface.javascript_binding_name, const)
    
    for attr in idl_interface.attributes:
        yield ""
        yield format_attribute(idl_interface.javascript_binding_name, attr)
        
    for oper in idl_interface.operations:
        yield ""
        yield format_method(idl_interface.javascript_binding_name, oper)

@_join("\n")
def format_file(url, idl_interfaces):
    yield format_fileoverview(url)
    yield "\n"
    for interface in idl_interfaces:
        yield format_interface(interface)
        yield "\n"